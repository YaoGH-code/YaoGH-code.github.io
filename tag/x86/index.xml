<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>x86 | Yao Xu</title>
    <link>http://yaogh-code.github.io/tag/x86/</link>
      <atom:link href="http://yaogh-code.github.io/tag/x86/index.xml" rel="self" type="application/rss+xml" />
    <description>x86</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Thu, 15 Jun 2023 00:00:00 +0000</lastBuildDate>
    <image>
      <url>http://yaogh-code.github.io/media/icon_hu3fa31baf23334842a6c8f8d4ce717078_16335_512x512_fill_lanczos_center_3.png</url>
      <title>x86</title>
      <link>http://yaogh-code.github.io/tag/x86/</link>
    </image>
    
    <item>
      <title>x86 Notes</title>
      <link>http://yaogh-code.github.io/post/x86_notes/</link>
      <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate>
      <guid>http://yaogh-code.github.io/post/x86_notes/</guid>
      <description>&lt;h2 id=&#34;authors-a-cs107-joint-staff-effort-erik-julie-nate&#34;&gt;&lt;em&gt;Authors: A CS107 joint staff effort (Erik, Julie, Nate)&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;x86-64 (also known as x64 and/or AMD64) is the 64-bit version of the x86/IA32 instruction set. Below is our overview of its features that are relevant to CS107. There is more extensive coverage on these topics in Chapter 3 of the B&amp;amp;O textbook. See also our x86-64 sheet for a compact reference.&lt;/p&gt;
&lt;h2 id=&#34;registers&#34;&gt;Registers&lt;/h2&gt;
&lt;p&gt;The table below lists the commonly used registers (sixteen general-purpose plus two special). Each register is 64 bits wide; the lower 32-, 16- and 8-bit portions are selectable by a pseudo-register name. Some registers are designated for a certain purpose, such as &lt;code&gt;%rsp&lt;/code&gt; being used as the stack pointer or &lt;code&gt;%rax&lt;/code&gt; for the return value from a function. Other registers are all-purpose, but have a conventional use depending on whether caller-owned or callee-owned. If the function binky calls winky, we refer to binky as the caller and winky as the callee. For example, the registers used for the first 6 arguments and return value are all callee-owned. The callee can freely use those registers, overwriting existing values without taking any precautions. If &lt;code&gt;%rax&lt;/code&gt; holds a value the caller wants to retain, the caller must copy the value to a &amp;ldquo;safe&amp;rdquo; location before making a call. The callee-owned registers are ideal for scratch/temporary use by the callee. In contrast, if the callee intends to use a caller-owned register, it must first preserve its value and restore it before exiting the call. The caller-owned registers are used for local state of the caller that needs to preserved across further function calls.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Register&lt;/th&gt;
&lt;th&gt;Conventional Use&lt;/th&gt;
&lt;th&gt;Low 32-bits&lt;/th&gt;
&lt;th&gt;Low 16-bits&lt;/th&gt;
&lt;th&gt;Low 8-bits&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%rax&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Return value, callee-owned&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%eax&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%ax&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%al&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%rdi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1st argument, callee-owned&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%edi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%di&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%dil&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%rsi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2nd argument, callee-owned&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%esi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%si&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%sil&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%rdx&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;3rd argument, callee-owned&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%edx&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%dx&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%dl&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%rcx&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;4th argument, callee-owned&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%ecx&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%cx&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%cl&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%r8&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;5th argument, callee-owned&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%r8d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%r8w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%r8b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%r9&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;6th argument, callee-owned&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%r9d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%r9w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%r9b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%r10&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Scratch/temporary, callee-owned&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%r10d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%r10w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%r10b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%r11&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Scratch/temporary, callee-owned&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%r11d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%r11w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%r11b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%rsp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Stack pointer, caller-owned&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%esp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%sp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%spl&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%rbx&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Local variable, caller-owned&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%ebx&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%bx&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%bl&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%rbp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Local variable, caller-owned&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%ebp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%bp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%bpl&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%r12&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Local variable, caller-owned&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%r12d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%r12w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%r12b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%r13&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Local variable, caller-owned&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%r13d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%r13w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%r13b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%r14&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Local variable, caller-owned&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%r14d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%r14w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%r14b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%r15&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Local variable, caller-owned&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%r15d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%r15w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%r15b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%rip&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Instruction pointer&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%eflags&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Status/condition code bits&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;addressing-modes&#34;&gt;Addressing Modes&lt;/h2&gt;
&lt;p&gt;True to its CISC nature, x86-64 supports a variety of addressing modes. An addressing mode is an expression that calculates an address in memory to be read/written to. These expressions are used as the source or destination for a &lt;code&gt;mov&lt;/code&gt; instruction and other instructions that access memory. The code below demonstrates how to write the immediate value 1 to various memory locations in an example of each of the available addressing modes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;movl $1, 0x604892         # direct (address is constant value)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;movl $1, (%rax)           # indirect (address is in register %rax)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;movl $1, -24(%rbp)        # indirect with displacement
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                          # (address = base %rbp + displacement -24)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;movl $1, 8(%rsp, %rdi, 4) # indirect with displacement and scaled-index
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                          # (address = base %rsp + displ 8 + index %rdi * scale 4)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;movl $1, (%rax, %rcx, 8)  # (special case scaled-index, displ assumed 0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;movl $1, 0x8(, %rdx, 4)   # (special case scaled
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-index, base assumed 0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;movl $1, 0x4(%rax, %rcx)  # (special case scaled-index, scale assumed 1)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;common-instructions&#34;&gt;Common Instructions&lt;/h2&gt;
&lt;p&gt;A note about instruction suffixes: many instructions have a suffix (&lt;code&gt;b&lt;/code&gt;, &lt;code&gt;w&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt;, or &lt;code&gt;q&lt;/code&gt;) which indicates the bitwidth of the operation (1, 2, 4, or 8 bytes, respectively). The suffix is often elided when the bitwidth can be determined from the operands. For example, if the destination register is &lt;code&gt;%eax&lt;/code&gt;, it must be 4 bytes, if &lt;code&gt;%ax&lt;/code&gt; it must be 2 bytes, and &lt;code&gt;%al&lt;/code&gt; would be 1 byte. A few instructions such as &lt;code&gt;movs&lt;/code&gt; and &lt;code&gt;movz&lt;/code&gt; have two suffixes: the first is for the source operand, the second for the destination. For example, &lt;code&gt;movzbl&lt;/code&gt; moves a 1-byte source value to a 4-byte destination.&lt;/p&gt;
&lt;p&gt;When the destination is a sub-register, only those specific bytes in the sub-register are written with one broad exception: a 32-bit instruction zeroes the high-order 32 bits of the destination register.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;add src, dst&lt;/code&gt;: dst += src&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sub src, dst&lt;/code&gt;: dst -= src&lt;/li&gt;
&lt;li&gt;&lt;code&gt;imul src, dst&lt;/code&gt;: dst *= src&lt;/li&gt;
&lt;li&gt;&lt;code&gt;neg dst&lt;/code&gt;: dst = -dst (arithmetic inverse)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;and src, dst&lt;/code&gt;: dst &amp;amp;= src&lt;/li&gt;
&lt;li&gt;&lt;code&gt;or src, dst&lt;/code&gt;: dst |= src&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xor src, dst&lt;/code&gt;: dst ^= src&lt;/li&gt;
&lt;li&gt;&lt;code&gt;not dst&lt;/code&gt;: dst = ~dst (bitwise inverse)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shl count, dst&lt;/code&gt;: dst &amp;laquo;= count (left shift dst by count positions), synonym &lt;code&gt;sal&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sar count, dst&lt;/code&gt;: dst &amp;raquo;= count (arithmetic right shift dst by count positions)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shr count, dst&lt;/code&gt;: dst &amp;raquo;= count (logical right shift dst by count positions)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some instructions have special-case variants with different numbers of operands:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;imul src&lt;/code&gt;: single operand &lt;code&gt;imul&lt;/code&gt; assumes the other operand is in &lt;code&gt;%rax&lt;/code&gt;, computes 128-bit result, stores high 64-bits in &lt;code&gt;%rdx&lt;/code&gt;, low 64-bits in &lt;code&gt;%rax&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shl dst&lt;/code&gt;: dst &amp;laquo;= 1 (no count =&amp;gt; assume 1, same for &lt;code&gt;sar&lt;/code&gt;, &lt;code&gt;shr&lt;/code&gt;, &lt;code&gt;sal&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;branches-and-other-use-of-condition-codes&#34;&gt;Branches and Other Use of Condition Codes&lt;/h2&gt;
&lt;p&gt;The special &lt;code&gt;%eflags&lt;/code&gt; register stores a set of boolean flags called the condition codes. Most arithmetic operations update those codes. A conditional jump reads the condition codes to determine whether to take the branch or not. The condition codes include ZF (zero flag), SF (sign flag), OF (overflow flag, signed), and CF (carry flag, unsigned). For example, if the result was zero, the ZF is set; if an operation overflowed (into the sign bit), OF is set.&lt;/p&gt;
&lt;p&gt;The general pattern for all branches is to execute a &lt;code&gt;cmp&lt;/code&gt; or &lt;code&gt;test&lt;/code&gt; operation to set the flags followed by a jump instruction variant that reads the flags to determine whether to take the branch or continue on. The operands to a &lt;code&gt;cmp&lt;/code&gt; or &lt;code&gt;test&lt;/code&gt; are immediate, register, or memory locations (with at most one memory operand). There are 32 variants of conditional jump, several of which are synonyms. Here are some example branch instructions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;cmpl&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;op2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;op1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# computes result = op1 - op2, discards result, sets condition codes
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;op2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;op1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# computes result = op1 &amp;amp; op2, discards result, sets condition codes
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jmp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# unconditional jump
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;je&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# jump equal, synonym `jz` (jump zero, ZF=1)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jne&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# jump not equal, synonym `jnz` (jump non-zero, ZF=0)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;js&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# jump signed (SF=1)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jns&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# jump not signed (SF=0)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jg&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# jump greater than, synonym `jnle` (jump not less or equal, ZF=0 and SF=OF)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jge&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# jump greater or equal, synonym `jnl` (jump not less, SF=OF)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jl&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# jump less than, synonym `jnge` (jump not greater or equal, SF!=OF)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jle&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# jump less or equal, synonym `jng` (jump not greater, ZF=1 or SF!=OF)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ja&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# jump above, synonym `jnbe` (jump not below or equal, CF=0 and ZF=0)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jae&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# jump above or equal (CF=0)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jb&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# jump below, synonym `jnae` (jump not above or equal, CF=1)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jbe&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# jump below or equal (CF=1 or ZF=1)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;setx-and-movx&#34;&gt;Setx and Movx&lt;/h2&gt;
&lt;p&gt;There are two other families of instructions that read/react to the current condition codes. The &lt;code&gt;setx&lt;/code&gt; instructions set a destination register to 0 or 1 according to the status of condition &lt;code&gt;x&lt;/code&gt;. The &lt;code&gt;cmovx&lt;/code&gt; instructions will conditionally execute a move based on whether condition &lt;code&gt;x&lt;/code&gt; holds. The &lt;code&gt;x&lt;/code&gt; is a placeholder for any of the conditional variants: &lt;code&gt;e&lt;/code&gt;, &lt;code&gt;ne&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;ns&lt;/code&gt;, etc.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;sete&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dst&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;           &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# set `dst` to 0 or 1 based on zero/equal condition
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setge&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dst&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# set `dst` to 0 or 1 based on greater/equal condition
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cmovns&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dst&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# proceed with `mov` if `ns` condition holds
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cmovle&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dst&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# proceed with `mov` if `le` condition holds
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For the &lt;code&gt;setx&lt;/code&gt; instruction, the destination must be a single-byte sub-register (e.g., &lt;code&gt;%al&lt;/code&gt; for the low byte of &lt;code&gt;%rax&lt;/code&gt;). For the &lt;code&gt;cmovx&lt;/code&gt; instructions, both the source and destination must be registers.&lt;/p&gt;
&lt;h2 id=&#34;function-call-stack&#34;&gt;Function Call Stack&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;%rsp&lt;/code&gt; register is used as the &amp;ldquo;stack pointer&amp;rdquo;; &lt;code&gt;push&lt;/code&gt; and &lt;code&gt;pop&lt;/code&gt; are used to add/remove values from the stack. The &lt;code&gt;push&lt;/code&gt; instruction takes one operand: an immediate, a register, or a memory location. &lt;code&gt;Push&lt;/code&gt; decrements &lt;code&gt;%rsp&lt;/code&gt; and copies the operand to be topmost on the stack. The &lt;code&gt;pop&lt;/code&gt; instruction takes one operand, the destination register. `Pop&lt;/p&gt;
&lt;p&gt;&lt;code&gt;copies the topmost value to the destination and increments&lt;/code&gt;%rsp&lt;code&gt;. It is also valid to directly adjust &lt;/code&gt;%rsp` to add/remove an entire array or a collection of variables with a single operation. Note the stack grows downward (toward lower addresses).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;push %rbx         # push value of `%rbx` onto the stack
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pushq $0x3        # push immediate value `3` onto the stack
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sub $0x10, %rsp   # adjust stack pointer to set aside 16 more bytes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pop %rax          # pop topmost value from stack into register `%rax`
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;add $0x10, %rsp   # adjust stack point to remove topmost 16 bytes
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Call/return are used to transfer control between functions. The &lt;code&gt;callq&lt;/code&gt; instruction takes one operand, the address of the function being called. It pushes the return address (current value of &lt;code&gt;%rip&lt;/code&gt;, which is the next instruction after the &lt;code&gt;call&lt;/code&gt;) onto the stack and then jumps to the address of the function being called. The &lt;code&gt;retq&lt;/code&gt; instruction pops the return address from the stack into &lt;code&gt;%rip&lt;/code&gt;, thus resuming at the saved return address.&lt;/p&gt;
&lt;p&gt;To set up for a call, the caller puts the first six arguments into registers &lt;code&gt;%rdi&lt;/code&gt;, &lt;code&gt;%rsi&lt;/code&gt;, &lt;code&gt;%rdx&lt;/code&gt;, &lt;code&gt;%rcx&lt;/code&gt;, &lt;code&gt;%r8&lt;/code&gt;, and &lt;code&gt;%r9&lt;/code&gt; (any additional arguments are pushed onto the stack) and then executes the &lt;code&gt;call&lt;/code&gt; instruction.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mov $0x3, %rdi    # first arg is passed in `%rdi`
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mov $0x7, %rsi    # second arg is passed in `%rsi`
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;callq binky       # transfers control to function binky
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When the callee finishes, it writes the return value (if any) to &lt;code&gt;%rax&lt;/code&gt;, cleans up the stack, and uses the &lt;code&gt;retq&lt;/code&gt; instruction to return control to the caller.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mov $0x0, %eax    # write return value to `%rax`
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;add $0x10, %rsp   # deallocate stack frame
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;retq              # return from current function, resume caller
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The target for a branch or call instruction is most typically an absolute address that was determined at compile-time. However, there are cases where the target is not known until runtime, such as a switch statement compiled into a jump table or when invoking a function pointer. For these, the target address is computed and stored in a register, and the branch/call variant is used &lt;code&gt;je *%rax&lt;/code&gt; or &lt;code&gt;callq *%rax&lt;/code&gt; to read the target address from the specified register.&lt;/p&gt;
&lt;h2 id=&#34;assembly-and-gdb&#34;&gt;Assembly and gdb&lt;/h2&gt;
&lt;p&gt;The debugger has many features that allow you to trace and debug code at the assembly level. You can print the value in a register by prefixing its name with &lt;code&gt;$&lt;/code&gt; or use the command &lt;code&gt;info reg&lt;/code&gt; to dump the values of all registers:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(gdb) p $rsp
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(gdb) info reg
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;disassemble&lt;/code&gt; command will print the disassembly for a function by name. The &lt;code&gt;x&lt;/code&gt; command supports an &lt;code&gt;i&lt;/code&gt; format which interprets the contents of a memory address as an encoded instruction.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(gdb) disassemble main   // disassemble, print all instructions of main
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(gdb) x/8i main          // disassemble, print first 8 instructions
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can set a breakpoint at a particular assembly instruction by its direct address or offset within a function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(gdb) b *0x08048375
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(gdb) b *main+7          // break at instruction 7 bytes into main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can advance by instruction (instead of source line) using the &lt;code&gt;stepi&lt;/code&gt; and &lt;code&gt;nexti&lt;/code&gt; commands.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(gdb) stepi
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(gdb) nexti
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
